# Generated by Django 3.2.4 on 2021-06-29 02:32

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=50, verbose_name='班级名称')),
            ],
            options={
                'db_table': 'class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college_name', models.CharField(max_length=50, verbose_name='学院名称')),
                ('college_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.class', verbose_name='学院班级')),
            ],
            options={
                'db_table': 'college',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('contest_id', models.AutoField(primary_key=True, serialize=False, verbose_name='竞赛编号')),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='竞赛标题')),
                ('start_time', models.DateTimeField(verbose_name='开始时间')),
                ('end_time', models.DateTimeField(verbose_name='结束时间')),
                ('defunct', models.BooleanField(default='0', verbose_name='是否屏蔽')),
                ('description', models.TextField(blank=True, null=True, verbose_name='竞赛描述')),
                ('private', models.BooleanField(default='1', verbose_name='是否公开')),
                ('lang_mask', models.CharField(blank=True, max_length=50, null=True, verbose_name='竞赛语言')),
            ],
            options={
                'db_table': 'contest',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(verbose_name='竞赛题目编号')),
                ('contest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.contest', verbose_name='竞赛编号')),
            ],
            options={
                'db_table': 'contest_problem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CustomInput',
            fields=[
                ('solution_id', models.AutoField(primary_key=True, serialize=False, verbose_name='用户编号')),
                ('input_text', models.TextField(null='True', verbose_name='输入测试数据')),
            ],
            options={
                'db_table': 'custom_input',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('municipality_name', models.CharField(max_length=50, verbose_name='市级城市')),
            ],
            options={
                'db_table': 'municipality',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Online',
            fields=[
                ('hash', models.CharField(max_length=32, primary_key=True, serialize=False, verbose_name='主键')),
                ('ip', models.GenericIPAddressField(verbose_name='ip地址')),
                ('ua', models.CharField(max_length=255, verbose_name='浏览器相关的标识字符串')),
                ('refer', models.CharField(blank=True, max_length=255, null=True, verbose_name='访问的上个页面的地址')),
                ('last_move', models.IntegerField(verbose_name='最后一次修改的时间')),
                ('first_time', models.IntegerField(blank=True, null=True, verbose_name='第一次访问的时间')),
                ('uri', models.CharField(blank=True, max_length=255, null=True, verbose_name='统一资源指示器')),
            ],
            options={
                'db_table': 'online',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Password',
            fields=[
                ('user_id', models.CharField(max_length=32, primary_key=True, serialize=False, verbose_name='学号/工号')),
                ('password', models.CharField(max_length=64, verbose_name='密码')),
            ],
            options={
                'db_table': 'password',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problems',
            fields=[
                ('problem_id', models.AutoField(primary_key=True, serialize=False, verbose_name='题目编号')),
                ('title', models.CharField(max_length=50, verbose_name='题目标题')),
                ('description', models.TextField(blank=True, null=True, verbose_name='题目描述')),
                ('input', models.TextField(blank=True, null=True, verbose_name='输入描述')),
                ('output', models.TextField(blank=True, null=True, verbose_name='输出描述')),
                ('sample_input', models.TextField(blank=True, null=True, verbose_name='样例输入')),
                ('sample_output', models.TextField(blank=True, null=True, verbose_name='样例输出')),
                ('spj', models.BooleanField(default=0, verbose_name='是否特判')),
                ('hint', models.TextField(blank=True, null=True, verbose_name='提示')),
                ('source', models.CharField(blank=True, max_length=100, null=True, verbose_name='来源')),
                ('in_data', models.DateTimeField(blank=True, null=True, verbose_name='创建时间')),
                ('time_limit', models.IntegerField(default=1000, verbose_name='时间限制')),
                ('memory_limit', models.IntegerField(default=128, verbose_name='空间限制')),
                ('defunct', models.BooleanField(default=0, verbose_name='是否隐藏')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='知识点')),
                ('difficulty', models.IntegerField(blank=True, null=True, verbose_name='难度')),
                ('is_delete', models.BooleanField(default=0, verbose_name='题目保护')),
            ],
            options={
                'db_table': 'problems',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=50, verbose_name='学校名称')),
                ('school_describe', models.TextField(blank=True, null=True, verbose_name='学校描述')),
                ('school_college', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.college', verbose_name='学校学院')),
            ],
            options={
                'db_table': 'school',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('solution_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='运行编号')),
                ('time', models.IntegerField(verbose_name='运行时间')),
                ('memory', models.IntegerField(verbose_name='运行空间')),
                ('in_date', models.DateTimeField(verbose_name='加入时间')),
                ('result', models.IntegerField(verbose_name='运行结果')),
                ('language', models.IntegerField(verbose_name='所用语言')),
                ('ip', models.GenericIPAddressField(verbose_name='用户地址')),
                ('valid', models.BooleanField(default='1', verbose_name='是否有效')),
                ('code_length', models.IntegerField(verbose_name='代码长度')),
                ('judge_time', models.DateTimeField(blank=True, null=True, verbose_name='判题时间')),
                ('pass_rate', models.DecimalField(decimal_places=2, max_digits=3, verbose_name='通过百分比')),
                ('contest_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.contest', verbose_name='所属竞赛组')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problems', verbose_name='问题编号')),
            ],
            options={
                'db_table': 'solution',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompileInfo',
            fields=[
                ('solution_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.solution', verbose_name='运行编号')),
                ('error', models.TextField(blank=True, null=True, verbose_name='编译错误原因')),
            ],
            options={
                'db_table': 'compile_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RuntimeInfo',
            fields=[
                ('solution_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.solution', verbose_name='运行编号')),
                ('error', models.TextField(blank=True, null=True, verbose_name='编译错误原因')),
            ],
            options={
                'db_table': 'runtime_info',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SourceCode',
            fields=[
                ('solution_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.solution', verbose_name='运行编号')),
                ('source', models.TextField(blank='True', null='True', verbose_name='源代码')),
            ],
            options={
                'db_table': 'source_code',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('tid', models.AutoField(primary_key=True, serialize=False, verbose_name='论坛序号')),
                ('title', models.CharField(max_length=60, verbose_name='标题')),
                ('status', models.BooleanField(verbose_name='状态')),
                ('top_level', models.IntegerField(default='0', verbose_name='置顶等级')),
                ('author_id', models.CharField(max_length=48, verbose_name='作者账号')),
                ('cid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.contest', verbose_name='竞赛编号')),
                ('pid', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.contestproblem', verbose_name='竞赛中题目编号')),
            ],
            options={
                'db_table': 'topic',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sim', models.IntegerField(blank=True, null=True, verbose_name='相似度（50-100）')),
                ('s_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sim_solution', to='app.solution', verbose_name='提交编号')),
                ('sim_s_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sim_sim', to='app.solution', verbose_name='与 s_id 相似的 solution_id')),
            ],
            options={
                'db_table': 'sim',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province_name', models.CharField(max_length=25, verbose_name='省份')),
                ('province_municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.municipality', verbose_name='省份城市')),
            ],
            options={
                'db_table': 'province',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='problems',
            name='accepted',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problem_accepted', to='app.solution', verbose_name='通过数'),
        ),
        migrations.AddField(
            model_name='problems',
            name='submit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problem_submit', to='app.solution', verbose_name='提交数'),
        ),
        migrations.AddField(
            model_name='municipality',
            name='municipality_school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.school', verbose_name='城市学校'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='problem_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problems', verbose_name='题目编号'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='solved',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_solved', to='app.solution', verbose_name='题目正确'),
        ),
        migrations.AddField(
            model_name='contestproblem',
            name='submit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contest_submit', to='app.solution', verbose_name='题目提交'),
        ),
        migrations.AddField(
            model_name='contest',
            name='problem',
            field=models.ManyToManyField(blank=True, through='app.ContestProblem', to='app.Problems', verbose_name='竞赛问题'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.password', verbose_name='已注册用户')),
                ('real_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='真实姓名')),
                ('nick', models.CharField(blank=True, max_length=24, null=True, verbose_name='昵称')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='邮箱')),
                ('defunct', models.BooleanField(default=0, verbose_name='是否隐藏')),
                ('ip', models.GenericIPAddressField(verbose_name='ip地址')),
                ('access_time', models.DateTimeField(blank=True, null=True, verbose_name='登陆时间')),
                ('reg_time', models.DateTimeField(blank=True, null=True, verbose_name='注册时间')),
                ('score', models.IntegerField(default=0, verbose_name='得分')),
                ('sex', models.IntegerField(choices=[(0, '男'), (1, '女')], verbose_name='性别')),
                ('role_pri', models.IntegerField(choices=[(0, '超级管理员'), (1, '管理员'), (2, '教师'), (3, '志愿者'), (4, '用户')], default='4', verbose_name='权限')),
                ('is_delete', models.BooleanField(default=0, verbose_name='保护')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.school', verbose_name='学校')),
                ('solved', models.ManyToManyField(blank=True, to='app.Problems', verbose_name='解决数量')),
                ('submit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.solution', verbose_name='提交数量')),
            ],
            options={
                'db_table': 'user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_id', models.AutoField(primary_key=True, serialize=False)),
                ('team_name', models.CharField(max_length=50, verbose_name='队伍名')),
                ('team_manifesto', models.TextField(blank=True, null=True, verbose_name='团队宣言')),
                ('defunct', models.BooleanField(default='0', verbose_name='是否屏蔽')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.school', verbose_name='学校名')),
                ('trainer', models.ManyToManyField(blank=True, related_name='team_trainer', to='app.User', verbose_name='指导老师')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_user', to='app.user', verbose_name='团队成员')),
            ],
            options={
                'db_table': 'team',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='solution',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户编号'),
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False, verbose_name='帖子序号')),
                ('time', models.DateTimeField(verbose_name='发布时间')),
                ('content', models.TextField(verbose_name='帖子内容')),
                ('topic_id', models.IntegerField(verbose_name='帖子分组')),
                ('status', models.IntegerField(choices=[(0, '正常'), (1, '锁定'), (2, '删除')], verbose_name='论坛状态')),
                ('ip', models.GenericIPAddressField(verbose_name='发帖者地址')),
                ('author_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='作者账号')),
            ],
            options={
                'db_table': 'reply',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='problems',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='创建者'),
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('news_id', models.AutoField(primary_key=True, serialize=False, verbose_name='新闻编号')),
                ('title', models.CharField(max_length=50, verbose_name='新闻标题')),
                ('content', models.TextField(verbose_name='新闻内容')),
                ('time', models.DateTimeField(verbose_name='创建时间')),
                ('importance', models.CharField(max_length=50, verbose_name='关键字')),
                ('defunct', models.BooleanField(default=0, verbose_name='是否失效')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号')),
            ],
            options={
                'db_table': 'news',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False, verbose_name='登陆日志')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='登录IP')),
                ('time', models.DateTimeField(blank=True, null=True, verbose_name='登入时间')),
                ('login_way', models.CharField(blank=True, max_length=256, null=True, verbose_name='登录方法')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号')),
            ],
            options={
                'db_table': 'login_log',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='class',
            name='class_student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_student', to='app.user', verbose_name='班级成员'),
        ),
        migrations.AddField(
            model_name='class',
            name='class_teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_teacher', to='app.user', verbose_name='班级教师'),
        ),
    ]
