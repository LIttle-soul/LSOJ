# Generated by Django 3.2.6 on 2021-08-18 02:38

import app.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('chapter_id', models.AutoField(primary_key=True, serialize=False)),
                ('course_id', models.IntegerField(verbose_name='课程编号')),
                ('chapter_title', models.CharField(max_length=50, verbose_name='章节标题')),
                ('chapter_grade', models.IntegerField(default='0', verbose_name='章节级别')),
                ('chapter_number', models.IntegerField(default='0', verbose_name='章节编号')),
                ('pre_chapter', models.IntegerField(blank=True, null=True, verbose_name='前导章节')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '章节管理',
                'db_table': 'chapter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_id', models.IntegerField(verbose_name='章节编号')),
                ('class_id', models.IntegerField(verbose_name='班级编号')),
                ('chapter_status', models.SmallIntegerField(choices=[(0, '公开'), (1, '未公开'), (2, '创建中')], default='0', verbose_name='章节状态')),
            ],
            options={
                'verbose_name': '章节班级',
                'db_table': 'chapter_class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_id', models.IntegerField(verbose_name='章节编号')),
                ('chapter_content', models.TextField(verbose_name='章节内容')),
                ('chapter_creator', models.CharField(max_length=48, verbose_name='创建者')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '章节内容',
                'db_table': 'chapter_content',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_id', models.IntegerField(verbose_name='章节编号')),
                ('user_id', models.CharField(max_length=48, verbose_name='用户账号')),
                ('status', models.BooleanField(default='0', verbose_name='学习状态')),
            ],
            options={
                'verbose_name': '用户学习状态',
                'db_table': 'chapter_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('class_id', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='班级编号')),
                ('class_name', models.CharField(max_length=50, verbose_name='班级名称')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('class_introduce', models.CharField(blank=True, max_length=256, null=True, verbose_name='班级介绍')),
                ('class_type', models.SmallIntegerField(blank=True, choices=[(0, '行政班级'), (1, '团队类型'), (2, '课程班级')], null=True, verbose_name='班级类型')),
            ],
            options={
                'verbose_name': '班级管理',
                'db_table': 'class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CodeLanguage',
            fields=[
                ('language_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='语言编号')),
                ('language_name', models.CharField(max_length=50, verbose_name='语言名')),
            ],
            options={
                'verbose_name': '代码语言',
                'db_table': 'code_language',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('contest_id', models.AutoField(primary_key=True, serialize=False)),
                ('contest_title', models.CharField(blank=True, max_length=256, null=True, verbose_name='竞赛标题')),
                ('contest_introduce', models.TextField(blank=True, null=True, verbose_name='竞赛描述')),
                ('contest_province', models.SmallIntegerField(choices=[(0, '公开'), (1, '私有'), (2, '作业')], default='0', verbose_name='竞赛类型')),
                ('contest_password', models.CharField(blank=True, max_length=50, null=True, verbose_name='竞赛密码')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('contest_defunct', models.BooleanField(default='1', verbose_name='是否隐藏')),
                ('contest_language', models.ManyToManyField(to='app.CodeLanguage', verbose_name='竞赛语言')),
            ],
            options={
                'verbose_name': '竞赛管理',
                'db_table': 'contest',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.AutoField(primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=48, verbose_name='课程名称')),
                ('course_introduce', models.TextField(blank=True, null=True, verbose_name='课程介绍')),
                ('course_cover', models.ImageField(blank=True, null=True, upload_to=app.models.course_cover_path, verbose_name='封面')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='课程创建时间')),
                ('course_cost', models.IntegerField(default='0', verbose_name='课程价格')),
                ('course_creator', models.CharField(max_length=48, verbose_name='课程创建者')),
                ('course_status', models.SmallIntegerField(choices=[(0, '未激活'), (1, '公开'), (2, '私有'), (3, '收费')], default='0', verbose_name='课程状态')),
                ('course_browse', models.IntegerField(default='0', verbose_name='浏览数量')),
            ],
            options={
                'verbose_name': '课程管理',
                'db_table': 'course',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseEvaluation',
            fields=[
                ('evaluation_id', models.AutoField(primary_key=True, serialize=False)),
                ('evaluation_creator', models.CharField(max_length=48, verbose_name='评价创建者')),
                ('evaluation_course', models.IntegerField(verbose_name='课程编号')),
                ('evaluation_content', models.TextField(verbose_name='评价内容')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('evaluation_score', models.IntegerField(default='0')),
            ],
            options={
                'verbose_name': '课程评价',
                'db_table': 'course_evaluation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.IntegerField(verbose_name='课程编号')),
                ('file_type', models.SmallIntegerField(choices=[(0, '文件'), (1, '音频'), (2, '视频'), (3, '图片')], default='0', verbose_name='文件类型')),
                ('file_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='文件名')),
                ('upload_time', models.DateTimeField(auto_now=True, verbose_name='上传时间')),
                ('file_creator', models.CharField(max_length=48, verbose_name='用户编号')),
                ('file_menu', models.IntegerField(default='0', verbose_name='文件目录')),
                ('file_number', models.IntegerField(blank=True, null=True, verbose_name='文件编号')),
                ('course_file', models.FileField(upload_to=app.models.course_file_path, verbose_name='文件')),
                ('file_status', models.BooleanField(default='0', verbose_name='文件状态')),
            ],
            options={
                'verbose_name': '课程文件',
                'db_table': 'course_file',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseMenu',
            fields=[
                ('menu_id', models.AutoField(primary_key=True, serialize=False)),
                ('menu_grade', models.IntegerField(default='0', verbose_name='文件夹级别')),
                ('menu_number', models.IntegerField(default='0', verbose_name='文件夹编号')),
                ('pre_menu', models.IntegerField(blank=True, null=True, verbose_name='前导文件夹')),
                ('menu_status', models.BooleanField(default='0', verbose_name='目录状态')),
            ],
            options={
                'verbose_name': '课程菜单',
                'db_table': 'course_menu',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.IntegerField(verbose_name='课程编号')),
                ('course_user', models.CharField(blank=True, max_length=48, null=True, verbose_name='用户账号')),
                ('course_class', models.IntegerField(blank=True, null=True, verbose_name='班级编号')),
                ('user_identity', models.SmallIntegerField(default='0', verbose_name='用户身份')),
            ],
            options={
                'verbose_name': '课程用户',
                'db_table': 'course_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('forum_id', models.AutoField(primary_key=True, serialize=False)),
                ('forum_title', models.CharField(max_length=255, verbose_name='论坛标题')),
                ('forum_content', models.TextField(verbose_name='论坛内容')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='论坛创建时间')),
                ('forum_status', models.SmallIntegerField(choices=[(0, '审核中'), (1, '通过'), (2, '未通过'), (3, '已删除')], default='0', verbose_name='论坛状态')),
                ('forum_section', models.SmallIntegerField(choices=[(0, '公共'), (1, '问题'), (2, '竞赛'), (3, '课程'), (4, '论坛'), (5, '帖子'), (6, '闯关'), (7, '班级')], default='0', verbose_name='论坛版块')),
                ('section_id', models.IntegerField(blank=True, null=True, verbose_name='版块编号')),
                ('forum_priority', models.IntegerField(blank=True, null=True, verbose_name='优先级')),
                ('forum_visits', models.IntegerField(blank=True, null=True, verbose_name='浏览量')),
            ],
            options={
                'verbose_name': '论坛管理',
                'db_table': 'forum',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('level_id', models.AutoField(primary_key=True, serialize=False)),
                ('level_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='关卡标题')),
                ('level_description', models.TextField(blank=True, null=True, verbose_name='关卡描述')),
                ('level_num', models.IntegerField(blank=True, null=True, verbose_name='关卡编号')),
                ('level_status', models.BooleanField(default='1', verbose_name='关卡状态')),
            ],
            options={
                'verbose_name': '关卡管理',
                'db_table': 'level',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LevelKind',
            fields=[
                ('kind_id', models.AutoField(primary_key=True, serialize=False)),
                ('kind_title', models.CharField(blank=True, max_length=48, null=True, verbose_name='类型名称')),
                ('kind_description', models.TextField(blank=True, null=True, verbose_name='类型介绍')),
            ],
            options={
                'db_table': 'level_kind',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('municipality_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='城市编号')),
                ('municipality_name', models.CharField(max_length=50, verbose_name='城市名')),
            ],
            options={
                'verbose_name': '城市管理',
                'db_table': 'municipality',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('news_id', models.AutoField(primary_key=True, serialize=False)),
                ('news_title', models.CharField(blank=True, max_length=250, null=True, verbose_name='新闻标题')),
                ('news_introduce', models.TextField(blank=True, null=True, verbose_name='新闻内容')),
                ('creator_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('news_importance', models.IntegerField(default='0', verbose_name='优先级')),
            ],
            options={
                'verbose_name': '新闻管理',
                'db_table': 'news',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('problem_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='题目编号')),
                ('problem_title', models.CharField(max_length=200, verbose_name='题目标题')),
                ('problem_description', models.TextField(verbose_name='题目描述')),
                ('problem_spj', models.BooleanField(default='0', verbose_name='是否特判')),
                ('problem_course', models.CharField(blank=True, max_length=256, null=True, verbose_name='题目来源')),
                ('creation_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('time_limit', models.IntegerField(default='1000', verbose_name='时间限制')),
                ('memory_limit', models.IntegerField(default='128', verbose_name='空间限制')),
                ('problem_tag', models.CharField(blank=True, max_length=256, null=True, verbose_name='题目标签')),
                ('problem_difficult', models.SmallIntegerField(default='0', verbose_name='题目难度')),
                ('problem_status', models.SmallIntegerField(choices=[(0, '公开'), (1, '隐藏'), (2, '竞赛')], default='0', verbose_name='题目状态')),
            ],
            options={
                'verbose_name': '问题管理',
                'db_table': 'problem',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('province_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='省份编号')),
                ('province_name', models.CharField(max_length=25, verbose_name='省份名')),
            ],
            options={
                'verbose_name': '省份管理',
                'db_table': 'province',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('question_description', models.TextField()),
                ('question_type', models.SmallIntegerField(choices=[(0, '单选题'), (1, '多选题'), (2, '判断题'), (3, '填空题'), (4, '解答题')])),
                ('question_option', models.TextField(blank=True, null=True, verbose_name='问题选项：`|`分割选项')),
                ('question_answer', models.TextField(blank=True, null=True, verbose_name='问题答案：json存储')),
                ('question_course', models.IntegerField(verbose_name='所属课程id')),
                ('question_change', models.BooleanField(default='0', verbose_name='允许答案互换')),
                ('upload_user', models.CharField(blank=True, max_length=48, null=True, verbose_name='上传用户')),
                ('upload_time', models.DateTimeField(auto_now=True)),
                ('question_status', models.BooleanField(default='0', verbose_name='问题发布状态')),
            ],
            options={
                'verbose_name': '课程问题管理',
                'db_table': 'question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.AutoField(primary_key=True, serialize=False)),
                ('task_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='作业标题')),
                ('task_explain', models.TextField(blank=True, null=True, verbose_name='作业描述')),
                ('task_creator', models.CharField(blank=True, max_length=48, null=True, verbose_name='作业创建者')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('task_type', models.SmallIntegerField(choices=[(0, '测试'), (1, '作业'), (2, '考试')], default='0', verbose_name='作业类型')),
                ('begin_time', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('task_status', models.BooleanField(default='0', verbose_name='作业状态')),
                ('task_judge', models.SmallIntegerField(default='0', verbose_name='是否自动判题')),
                ('task_chapter', models.IntegerField(blank=True, null=True, verbose_name='所属章节')),
                ('task_course', models.IntegerField(blank=True, null=True, verbose_name='所属课程')),
                ('task_class', models.IntegerField(default='0', verbose_name='所属班级【0为所有班级】')),
            ],
            options={
                'verbose_name': '课程作业管理',
                'db_table': 'task',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaskQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.IntegerField(verbose_name='作业编号')),
                ('question_type', models.SmallIntegerField(choices=[(0, '题库题目'), (1, '编程题目')], default='0', verbose_name='问题类型')),
                ('question_id', models.IntegerField(verbose_name='问题编号')),
                ('question_number', models.IntegerField(blank=True, null=True, verbose_name='问题序号')),
                ('question_score', models.IntegerField(blank=True, null=True, verbose_name='问题分数')),
            ],
            options={
                'verbose_name': '作业问题管理',
                'db_table': 'take_question',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TaskSubmit',
            fields=[
                ('submit_id', models.AutoField(primary_key=True, serialize=False)),
                ('task_id', models.IntegerField(verbose_name='作业编号')),
                ('task_user', models.CharField(max_length=48, verbose_name='用户编号')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='提交时间')),
                ('use_time', models.IntegerField(blank=True, null=True, verbose_name='花费时间')),
                ('submit_content', models.TextField(verbose_name='提交答案|json格式存储')),
                ('submit_score', models.IntegerField(default='-1', verbose_name='作业分数')),
                ('submit_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='提交ip地址')),
                ('judge_time', models.DateTimeField(auto_now_add=True, verbose_name='判题时间')),
                ('judge_user', models.CharField(blank=True, max_length=48, null=True, verbose_name='判题者')),
            ],
            options={
                'verbose_name': '作业提交',
                'db_table': 'task_submit',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserPassword',
            fields=[
                ('user_id', models.CharField(max_length=48, primary_key=True, serialize=False, verbose_name='用户账号')),
                ('user_password', models.CharField(max_length=48, verbose_name='用户密码')),
                ('registration_time', models.DateTimeField(auto_now=True, verbose_name='注册时间')),
            ],
            options={
                'verbose_name': '用户密码',
                'db_table': 'user_password',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.userpassword', verbose_name='用户账号')),
                ('user_icon', models.ImageField(blank=True, null=True, upload_to=app.models.user_icon_path, verbose_name='用户头像')),
                ('student_id', models.CharField(blank=True, max_length=48, null=True, verbose_name='用户学号')),
                ('user_name', models.CharField(blank=True, max_length=48, null=True, verbose_name='用户姓名')),
                ('user_nick', models.CharField(blank=True, max_length=24, null=True, verbose_name='用户昵称')),
                ('user_introduce', models.CharField(blank=True, max_length=250, null=True, verbose_name='用户介绍')),
                ('user_power', models.SmallIntegerField(choices=[(0, '超级管理员'), (1, '管理员'), (2, '教师'), (3, '志愿者'), (4, '普通用户')], default=4, verbose_name='用户身份')),
                ('user_score', models.IntegerField(default='0', verbose_name='用户得分')),
                ('user_sex', models.SmallIntegerField(blank=True, choices=[(0, '男'), (1, '女')], null=True, verbose_name='用户性别')),
                ('user_telephone', models.CharField(blank=True, max_length=20, null=True, verbose_name='用户电话')),
                ('user_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='用户邮箱')),
                ('user_birthday', models.DateTimeField(blank=True, null=True, verbose_name='用户生日')),
            ],
            options={
                'verbose_name': '用户管理',
                'db_table': 'user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('solution_id', models.AutoField(primary_key=True, serialize=False)),
                ('solution_code', models.TextField(blank=True, null=True, verbose_name='提交代码')),
                ('solution_time', models.DateTimeField(auto_now=True, verbose_name='提交时间')),
                ('solution_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='提交地址')),
                ('code_length', models.IntegerField(default='0', verbose_name='代码长度')),
                ('run_time', models.IntegerField(blank=True, null=True, verbose_name='运行时间')),
                ('run_memory', models.IntegerField(blank=True, null=True, verbose_name='运行空间')),
                ('run_result', models.SmallIntegerField(choices=[(0, '等待中'), (1, '重判中'), (2, '编译中'), (3, '判题中'), (4, '答案正确'), (5, '格式错误'), (6, '答案错误'), (7, '时间超限'), (9, '内存超限'), (9, '输出超限'), (10, '运行错误'), (11, '编译错误'), (12, '编译器错误')], default='0', verbose_name='运行结果')),
                ('run_error', models.TextField(blank=True, null=True, verbose_name='错误信息')),
                ('run_pass_rate', models.IntegerField(default='0', verbose_name='通过的测试数')),
                ('run_all_rate', models.IntegerField(default='1', verbose_name='所有的测试数')),
                ('contest_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.contest', verbose_name='竞赛编号')),
                ('level_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.level', verbose_name='关卡编号')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problem', verbose_name='问题编号')),
                ('solution_language', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.codelanguage', verbose_name='提交语言')),
            ],
            options={
                'verbose_name': '提交信息',
                'db_table': 'solution',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sim_ratio', models.DecimalField(decimal_places=4, default='0.0000', max_digits=5, verbose_name='重复率')),
                ('sim_solution_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sim_solution_id', to='app.solution', verbose_name='重复的提交编号')),
                ('solution_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.solution', verbose_name='提交编号')),
            ],
            options={
                'verbose_name': '提交判重',
                'db_table': 'sim',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('school_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='学校编号')),
                ('school_name', models.CharField(max_length=50, verbose_name='学校名称')),
                ('school_describe', models.TextField(blank=True, null=True, verbose_name='学校描述')),
                ('school_department', models.CharField(blank=True, max_length=20, null=True, verbose_name='主管部门')),
                ('school_rank', models.CharField(blank=True, max_length=20, null=True, verbose_name='办学层次')),
                ('school_remark', models.CharField(blank=True, max_length=100, null=True, verbose_name='学校备注')),
                ('school_municipality', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.municipality', verbose_name='学校所在城市')),
            ],
            options={
                'verbose_name': '学校管理',
                'db_table': 'school',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProblemFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_file', models.ImageField(upload_to='', verbose_name='问题图片')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problem', verbose_name='问题编号')),
            ],
            options={
                'verbose_name': '问题文件',
                'db_table': 'problem_file',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NewsFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('news_file', models.FileField(upload_to=app.models.news_file_path, verbose_name='新闻文件')),
                ('news_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.news', verbose_name='新闻编号')),
            ],
            options={
                'verbose_name': '新闻文件',
                'db_table': 'news_file',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='municipality',
            name='municipality_province',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.province', verbose_name='城市所在省份'),
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='用户IP')),
                ('login_time', models.DateTimeField(auto_now=True, verbose_name='登陆时间')),
                ('login_way', models.CharField(blank=True, max_length=256, null=True, verbose_name='登录方法')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.userpassword', verbose_name='登陆日志')),
            ],
            options={
                'verbose_name': '登录日志',
                'db_table': 'login_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LevelProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField(blank=True, null=True, verbose_name='当前问题编号')),
                ('level_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.level', verbose_name='关卡编号')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problem', verbose_name='问题编号')),
            ],
            options={
                'verbose_name': '关卡问题',
                'db_table': 'level_problem',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='level',
            name='level_belong',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.levelkind', verbose_name='属于那个大类'),
        ),
        migrations.AddField(
            model_name='level',
            name='level_pre',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.level', verbose_name='前置关卡'),
        ),
        migrations.AddField(
            model_name='level',
            name='level_problem',
            field=models.ManyToManyField(through='app.LevelProblem', to='app.Problem', verbose_name='关卡问题'),
        ),
        migrations.CreateModel(
            name='ForumFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forum_file', models.ImageField(upload_to=app.models.forum_file_path, verbose_name='论坛图片')),
                ('forum_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.forum', verbose_name='论坛编号')),
            ],
            options={
                'verbose_name': '论坛文件',
                'db_table': 'forum_file',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContestUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contest_account', models.CharField(blank=True, max_length=48, null=True, verbose_name='比赛账号生成')),
                ('contest_grades', models.CharField(blank=True, max_length=48, null=True, verbose_name='获奖等级')),
                ('contest_auditing', models.SmallIntegerField(default='0', verbose_name='审核状态')),
                ('contest_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.class', verbose_name='竞赛团队')),
                ('contest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.contest', verbose_name='竞赛编号')),
            ],
            options={
                'verbose_name': '竞赛用户',
                'db_table': 'contest_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ContestProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_num', models.IntegerField(blank=True, null=True, verbose_name='当前竞赛题目序号')),
                ('contest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.contest', verbose_name='竞赛编号')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.problem', verbose_name='问题编号')),
            ],
            options={
                'verbose_name': '竞赛问题',
                'db_table': 'contest_problem',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='contest',
            name='contest_problem',
            field=models.ManyToManyField(blank=True, through='app.ContestProblem', to='app.Problem', verbose_name='竞赛问题'),
        ),
        migrations.AddField(
            model_name='contest',
            name='contest_team',
            field=models.ManyToManyField(blank=True, through='app.ContestUser', to='app.Class', verbose_name='竞赛团队'),
        ),
        migrations.CreateModel(
            name='College',
            fields=[
                ('college_id', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='学院编号')),
                ('college_name', models.CharField(max_length=50, verbose_name='学院名称')),
                ('college_school', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='app.school', verbose_name='学院所在学校')),
            ],
            options={
                'verbose_name': '学院管理',
                'db_table': 'college',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='class',
            name='class_college',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.college', verbose_name='班级所在学院'),
        ),
        migrations.CreateModel(
            name='UserRank',
            fields=[
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='app.user', verbose_name='用户账号')),
                ('user_solved', models.IntegerField(default=0, verbose_name='解决')),
                ('user_submit', models.IntegerField(default=0, verbose_name='提交')),
                ('user_accurate', models.IntegerField(default=0, verbose_name='答案正确')),
                ('format_error', models.IntegerField(default=0, verbose_name='格式错误')),
                ('wrong_answer', models.IntegerField(default=0, verbose_name='答案错误')),
                ('time_over', models.IntegerField(default=0, verbose_name='时间超限')),
                ('memory_over', models.IntegerField(default=0, verbose_name='内存超限')),
                ('output_over', models.IntegerField(default=0, verbose_name='输出超限')),
                ('runtime_error', models.IntegerField(default=0, verbose_name='运行错误')),
                ('compile_error', models.IntegerField(default=0, verbose_name='编译错误')),
            ],
            options={
                'verbose_name': '用户排名',
                'db_table': 'user_rank',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='user_address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.municipality', verbose_name='用户所在地址'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.school', verbose_name='用户所在学校'),
        ),
        migrations.AddField(
            model_name='solution',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号'),
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('reply_id', models.AutoField(primary_key=True, serialize=False)),
                ('reply_content', models.TextField(verbose_name='回复内容')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='回复创建时间')),
                ('reply_status', models.SmallIntegerField(choices=[(0, '审核中'), (1, '通过'), (2, '未通过'), (3, '已删除')], default='0', verbose_name='回复状态')),
                ('reply_priority', models.IntegerField(blank=True, null=True, verbose_name='优先级')),
                ('forum_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.forum', verbose_name='论坛编号')),
                ('pre_reply', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.reply', verbose_name='前置回复')),
                ('reply_creator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reply_creator', to='app.user', verbose_name='回复创建者')),
                ('reply_user', models.ManyToManyField(to='app.User', verbose_name='点赞用户')),
            ],
            options={
                'verbose_name': '用户回复',
                'db_table': 'reply',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='problem',
            name='problem_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.user', verbose_name='题目创建者'),
        ),
        migrations.CreateModel(
            name='Printer',
            fields=[
                ('printer_id', models.AutoField(primary_key=True, serialize=False)),
                ('printer_date', models.DateTimeField(auto_now=True, verbose_name='打印时间')),
                ('printer_status', models.BooleanField(blank=True, null=True, verbose_name='打印状态')),
                ('printer_content', models.TextField(blank=True, null=True, verbose_name='打印内容')),
                ('printer_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='打印者')),
            ],
            options={
                'verbose_name': '打印管理',
                'db_table': 'printer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PassUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_time', models.DateTimeField(auto_now=True, verbose_name='过关时间')),
                ('level_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.level', verbose_name='关卡编号')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户编号')),
            ],
            options={
                'verbose_name': '过关用户',
                'db_table': 'pass_user',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='news',
            name='news_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.user', verbose_name='创建者'),
        ),
        migrations.CreateModel(
            name='LimitLogin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('limit_type', models.SmallIntegerField(choices=[(0, '黑名单模式'), (1, '白名单模式')], default='0', verbose_name='限制类型')),
                ('limit_time', models.DurationField(default='0', verbose_name='限制时长')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号')),
            ],
            options={
                'verbose_name': '登录限制',
                'db_table': 'limit_login',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='level',
            name='level_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='level_creator', to='app.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='level',
            name='pass_user',
            field=models.ManyToManyField(through='app.PassUser', to='app.User', verbose_name='通过人数'),
        ),
        migrations.AddField(
            model_name='forum',
            name='forum_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='forum_creator', to='app.user', verbose_name='论坛创建者'),
        ),
        migrations.AddField(
            model_name='forum',
            name='forum_user',
            field=models.ManyToManyField(to='app.User', verbose_name='点赞用户'),
        ),
        migrations.AddField(
            model_name='contestuser',
            name='contest_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='竞赛用户'),
        ),
        migrations.AddField(
            model_name='contest',
            name='contest_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contest_creator', to='app.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='contest',
            name='contest_user',
            field=models.ManyToManyField(blank=True, through='app.ContestUser', to='app.User', verbose_name='竞赛用户'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_type', models.SmallIntegerField(choices=[(0, '公共'), (1, '问题'), (2, '竞赛'), (3, '课程'), (4, '论坛'), (5, '帖子'), (6, '闯关'), (7, '班级')], default='0', verbose_name='收藏类型')),
                ('collection_forget_key', models.IntegerField(verbose_name='收藏内容的编号')),
                ('collection_time', models.DateTimeField(auto_now=True, verbose_name='收藏时间')),
                ('collection_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户编号')),
            ],
            options={
                'verbose_name': '用户收藏',
                'db_table': 'collection',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ClassUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.SmallIntegerField(choices=[(0, '学生'), (1, '教师'), (2, '助教')], default='0', verbose_name='用户类型')),
                ('add_time', models.DateTimeField(auto_now=True, verbose_name='加入时间')),
                ('add_type', models.SmallIntegerField(choices=[(0, '邀请码加入'), (1, '付费加入'), (2, '教师邀请')], default='2', verbose_name='加入方式')),
                ('user_remark', models.CharField(blank=True, max_length=48, null=True, verbose_name='用户备注')),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.class', verbose_name='班级序号')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号')),
            ],
            options={
                'verbose_name': '班级用户',
                'db_table': 'class_user',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='class',
            name='class_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_creator', to='app.user', verbose_name='创建者'),
        ),
        migrations.AddField(
            model_name='class',
            name='class_user',
            field=models.ManyToManyField(through='app.ClassUser', to='app.User', verbose_name='班级用户'),
        ),
        migrations.CreateModel(
            name='Balloon',
            fields=[
                ('balloon_id', models.AutoField(primary_key=True, serialize=False)),
                ('balloon_color', models.CharField(blank=True, max_length=20, null=True, verbose_name='气球颜色')),
                ('contest_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.contest', verbose_name='竞赛编号')),
                ('problem_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.problem', verbose_name='问题编号')),
                ('solution_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.solution', verbose_name='提交编号')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.user', verbose_name='用户账号')),
            ],
            options={
                'verbose_name': '气球管理',
                'db_table': 'balloon',
                'managed': True,
            },
        ),
    ]
